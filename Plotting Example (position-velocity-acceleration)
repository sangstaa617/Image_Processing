import numpy as np
import matplotlib.pyplot as plt
import os
from Gaussian_Smoothing import gaussianSmoothing

def lineGenerator(L, x_value, z_value, polar):

    x1 = x_value - .5*L * np.cos(polar)
    z1 = z_value - .5*L * np.sin(polar)

    x2 = x_value + .5 * L * np.cos(polar)
    z2 = z_value + .5 * L * np.sin(polar)

    x = [x1, x2]
    z = [z1, z2]

    return x, z


parent_directory = 'Desktop/EURP Reseach/Particle Dynamics'
cmap = plt.get_cmap('brg')
width = 0.01


filenames = ['10X20newtank1.500']

for name in filenames:
    filename = name
    position = filenames.index(filename)

    # define the name of the drop folder
    drop_folder = f"{filename.split('.')[0]}.data"

    # join the drop folder to the main directory
    full_path = os.path.join(parent_directory, drop_folder)

    # make the folder
    os.makedirs(full_path, exist_ok=True)
    data_path = os.path.join(full_path, 'lists')
    os.makedirs(data_path, exist_ok=True)

    # Read the raw data

    with open(f'{data_path}/object_size', 'r') as file:
        object_size = file.readlines()
    object_size = [float(line.strip()) for line in object_size]

    pixel_to_meter = width / float(object_size[0])

    with open(f'{data_path}/z_data', 'r') as file:
        positionz_list = file.readlines()
    positionz_list = [pixel_to_meter*float(line.strip()) for line in positionz_list]

    with open(f'{data_path}/x_data', 'r') as file:
        positionx_list = file.readlines()
    positionx_list = [pixel_to_meter*float(line.strip()) for line in positionx_list]

    with open(f'{data_path}/po_data', 'r') as file:
        ip_angle_list = file.readlines()
    ip_angle_list = [float(line.strip()) for line in ip_angle_list]

    with open(f'{data_path}/frame_size', 'r') as file:
        frame_size = file.readlines()
    frame_size = [float(line.strip()) for line in frame_size]


    # make the position decrease in the downward direction
    for i in range(len(positionz_list)):
        positionz_list[i] = np.max(positionz_list) - positionz_list[i]


    # smooth the data
    smooth_z_p, smooth_z_v, smooth_z_a = gaussianSmoothing(51, positionz_list)
    smooth_x_p, smooth_x_v, smooth_x_a = gaussianSmoothing(51, positionx_list)
    smooth_po_angle, smooth_po_v, smooth_po_a = gaussianSmoothing(51, ip_angle_list)

    smooth_po_angle = np.array(np.deg2rad(smooth_po_angle))

    # convert to m/s
    smooth_x_v = 500 * np.array(smooth_x_v)
    smooth_x_a = 500 ** 2 * np.array(smooth_x_a)
    smooth_z_v = 500 * np.array(smooth_z_v)
    smooth_z_a = 500 ** 2 * np.array(smooth_z_a)

    # establish constants
    g = 9.81  # m/s
    rho_w = 997  # water density (kg/m^3)
    rho_p = 1156  # PLA density (kg/m^3)
    mu = 0.001  # dynamic viscocity (N*s)

    # find the variable frontal area
    diameter = 10*10**-3
    height = 20*10**-3
    variable_height = np.absolute(height * (np.cos(smooth_po_angle))) + np.absolute(diameter * (np.sin(smooth_po_angle)))
    A = diameter * variable_height # m^2

    # calculate the mass and volume
    V = np.pi * (diameter/2)**2 * height # m^3
    m = V * rho_p # kg
    rho = rho_p/rho_w
    Cm = 0.5

    # calculate the drag coefficient and Re
    Cd = 2*V*(rho + Cm) / (smooth_z_v**2 * A) * ( (g*(rho - 1)/(rho + Cm)) - smooth_z_a)
    Re = (rho_w*smooth_z_v*diameter)/mu

Fg = np.zeros(len(smooth_z_v))
Fd = np.zeros(len(smooth_z_v))
Fb = np.zeros(len(smooth_z_v))
Fam = np.zeros(len(smooth_z_v))

F_sum = np.zeros(len(smooth_z_v))
F_test = np.zeros(len(smooth_z_v))
for i in range (len(smooth_z_v)):
    Fg[i] = rho_p * V * g
    Fd[i] = .5 * Cd[i] * rho_w * smooth_z_v[i] ** 2 * A[i]
    Fb[i] = rho_w * V * g
    Fam[i] = Cm * V * rho_w * smooth_z_a[i]

    F_sum[i] = Fg[i] - Fd[i] - Fb[i] - Fam[i]
    F_test[i] = m*smooth_z_a[i]

cmap = plt.get_cmap('viridis')

fig1, (ax1, ax2, ax3) = plt.subplots(1, 3)

for i in range(len(positionz_list)//20):
    i*=20
    x, z = lineGenerator(0.01, positionx_list[i], positionz_list[i], np.deg2rad(ip_angle_list[i]))
    print(positionz_list[i])
    ax1.plot(x, z, c="black")

ax1.set_aspect('equal')
ax1.set_xlim([0, 0.10])
ax1.set_ylabel('y (m)')

ax2.plot(smooth_x_v, smooth_z_p)
ax2.plot(smooth_z_v, smooth_z_p)
ax2.legend(('u_x', 'u_y'), loc='upper center')

ax3.plot(smooth_x_a, smooth_z_p)
ax3.plot(smooth_z_a, smooth_z_p)
ax3.legend(('a_x', 'a_y'), loc='best')


plt.tight_layout()
plt.show()
